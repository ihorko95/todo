{"version":3,"sources":["components/app-header/app-header.js","components/search-panel/search-panel.js","components/todo-list-item/todo-list-item.js","components/todo-list/todo-list.js","components/item-status-filter/item-status-filter.jsx","components/main-app/main-app.js","serviceWorker.js","index.js"],"names":["AppHeader","todo","done","className","SearchPanel","placeholder","TodoListItem","state","important","onTitleClick","setState","onMarkClick","classNames","this","props","title","onDeleted","cldone","clim","onClick","type","aria-hidden","Component","TodoList","todos","elements","map","item","id","itemProps","key","e","ItemStatusFilter","value","MainApp","todoData","idx","findIndex","el","slice","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75cd0f1d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const AppHeader =({todo, done})=>{\r\n   return <div className=\"row \">\r\n      <div className=\"col-12 col-sm-6 \"> <h1>TODO List</h1></div>\r\n      <div className=\"col-12 col-sm-6 align-self-end\"><h6 className=\"float-sm-right\">{todo} more to do, {done} done</h6></div>\r\n     \r\n      \r\n      </div>\r\n} ","import React from 'react'\r\n\r\nexport const SearchPanel =()=>{\r\n    return <div>\r\n        <input className=\"form-control\" placeholder='Search'/>\r\n    </div>\r\n}","import React, {Component} from 'react'\r\nimport './todo-list-item.css'\r\n\r\nexport class TodoListItem extends Component{\r\n  \r\n  state ={\r\n    done: false,\r\n    important: false\r\n  }\r\n  onTitleClick = ()=>{\r\n   this.setState(({done})=>{\r\n    return {done:!done}\r\n   })\r\n\r\n  }\r\n  onMarkClick = ()=>{\r\n    this.setState(({important})=>{\r\n     return{ important:!important}\r\n    })\r\n \r\n   }\r\n  \r\n  render(){\r\n   const {title, onDeleted} = this.props\r\n   const {done, important} = this.state\r\n\r\n      let classNames='', cldone='',clim=''\r\n      if(done) cldone=\" done\"\r\n      if(important)clim=\" important\"\r\n       classNames=\"im \"+cldone+clim\r\nreturn<span className=\"im\">\r\n <span  className={classNames} onClick={this.onTitleClick}>{title}</span> \r\n  <div className=\"btn-group float-right btn-group\" >\r\n    <button type=\"button\"  className=\"btn btn-outline-danger btn-sm \"\r\n    onClick={onDeleted}>\r\n          <i className=\"fa fa-trash-o\" aria-hidden=\"true\"></i>\r\n    </button>\r\n  \r\n    \r\n    <button type=\"button\"  className=\"btn btn-outline-success btn-sm \"\r\n    onClick={this.onMarkClick}>\r\n      <i className=\"fa fa-exclamation\" aria-hidden=\"true\" ></i>\r\n    </button>\r\n</div>\r\n</span>\r\n  }\r\n}\r\n\r\n","import React from 'react'\r\nimport {TodoListItem} from '../todo-list-item/todo-list-item'\r\nimport './todo-list.css'\r\nexport const TodoList =({todos,onDeleted})=>{\r\n    //const elements = todos.map((item)=>{return <li> <TodoListItem title={item.title} important= {item.important}/></li>})\r\n    \r\n      const elements = todos.map((item)=>{\r\n        const {id, ...itemProps}=item\r\n        return <li key={id} className=\"list-group-item\"> <TodoListItem  {...itemProps} onDeleted={(e)=>{onDeleted(id)}}/> \r\n      \r\n        \r\n        </li>})\r\n    return <div>\r\n        <ul className=\"list-group\">\r\n            {elements}\r\n        </ul>\r\n       \r\n    </div>\r\n}","import React,{Component} from 'react'\r\nimport \"./item-status-filter.css\"\r\n\r\n\r\nexport class ItemStatusFilter extends Component {\r\n    render(){\r\n        return <div className=\"item-status-filter btn-group float-sm-right\">  \r\n        <input type=\"button\" className=\"btn btn-info\" value=\"All\"/>\r\n        <input type=\"button\" className=\"btn btn-outline-secondary\" value=\"Active\"/>\r\n        <input type=\"button\" className=\"btn btn-outline-secondary\" value=\"Done\"/>\r\n    </div>\r\n    }\r\n}\r\n","import React, {Component} from 'react'\r\nimport {AppHeader} from '../app-header/app-header'\r\nimport {SearchPanel} from '../search-panel/search-panel'\r\nimport {TodoList} from '../todo-list/todo-list'\r\nimport {ItemStatusFilter} from '../item-status-filter/item-status-filter'\r\n\r\n\r\nexport default class MainApp extends Component {\r\n\r\n    state ={ todoData : [\r\n        {id:1, title:\"Drink coffee\", important: false},\r\n        {id:2, title:\"Make a meal\", important: true},\r\n        {id:3, title:\"Clean the room\",important: false}]\r\n      };\r\n  \r\n    onDeleted = (id)=>{\r\n        this.setState(({todoData})=>{\r\n            const idx =todoData.findIndex((el)=>el.id===id)\r\n            const arr = [\r\n                ...todoData.slice(0,idx),\r\n                ...todoData.slice(idx+1) ]\r\n            return {todoData:arr}\r\n        })\r\n    }\r\n\r\n    render(){\r\n        \r\n        return <div className=\"container\">\r\n        <div className=\"row\">\r\n        <div className=\"mx-auto col-lg-6\">\r\n                  <div className=\"row\">\r\n                      <div className=\"col\">\r\n                          <AppHeader todo={1} done={5}/>\r\n                      </div>\r\n                  </div> \r\n                  <div className=\"row align-items-center\">\r\n                      <div className=\"col-sm\">\r\n                          <SearchPanel/>\r\n                      </div>\r\n                      <div className=\"col-sm\">\r\n                          <ItemStatusFilter/>\r\n                      </div>\r\n                  </div>\r\n                  <div className=\"row\">\r\n                      <div className=\"col\">\r\n                          <TodoList todos={this.state.todoData} onDeleted={this.onDeleted}/>\r\n                      </div>\r\n                  </div>\r\n                  </div>\r\n                  </div>\r\n      </div>   \r\n  }\r\n\r\n}\r\n   \r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport MainApp from './components/main-app/main-app'\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n \n    //<App/>\n    <MainApp />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}